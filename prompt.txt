# Project: Build an AI Bot for AVACS Live Chat

## Goal
Build an intelligent bot that logs into the AVACS Live Chat application (Java ME / J2ME), receives user messages, replies using the ChatGPT API, and can generate and send images.

## Inputs
- The AVACS client `.jar` file (J2ME)
- Information about networking classes: `javax.microedition.io.SocketConnection`, `Connector`, `HttpConnection`, `SSLConnection`, etc.
- The `org.microemu` emulator to run the client on PC

## Plan

### Step 1: Decompile and analyze the JAR
- Decompile the JAR using JD-GUI or JADX.
- Determine the protocol used to connect to the server (Socket, HTTP, UDP).
- Trace paths like `Connector.open(...)`, `SocketConnection`, `HttpConnection`, and `DataInputStream.read()`.
- Extract the server IP/domain and port(s).
- Analyze the structure of messages sent to and received from the server.
- If needed, run the app in MicroEmulator and inspect network traffic with Wireshark or `tcpdump`.

### Step 2: Build the bot client (Java or Python)
- Using the findings from Step 1, implement a simple client that connects to the AVACS server using the same protocol.
- The client must be able to:
  - Log in
  - Join a chat room
  - Print received messages
  - Send messages

### Step 3: Connect the bot to ChatGPT
- Send every user text message to the OpenAI API.
- Receive the response from ChatGPT and post it back to the chat room.

### Step 4: Image generation capability
- If a user sends `/image <prompt>`:
  - Use DALLÂ·E or a Stable Diffusion model to generate an image.
  - Save the image and, if supported, send it to the chat room (otherwise send a link).

### Step 5: Run continuously on a VPS
- The final code must run as a CLI program (Java or Python).
- It should run on an Ubuntu VPS using `java -jar` or `python main.py`.
- Use tools like `tmux`, `systemd`, or `supervisor` for persistent execution.

## Requirements and constraints
- Do not use OCR, screenshots, or GUI monitoring under any circumstances.
- All interactions must happen at the network layer via the direct protocol.
- If the connection is encrypted (SSL/TLS), implement it using standard libraries or analyze the protocol to interoperate correctly.

## Expected final output
- A `BotClient.java` or `bot.py` that:
  - Connects to the chat server
  - Receives user messages
  - Gets responses from ChatGPT
  - Sends responses back to the chat
  - Handles image requests
