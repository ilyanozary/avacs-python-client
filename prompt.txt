# پروژه: ساخت ربات هوش مصنوعی برای AVACS Live Chat

## 🎯 هدف:
ساخت یک ربات هوشمند که به عنوان کلاینت وارد چت‌روم نرم‌افزار AVACS Live Chat بشود (نوشته‌شده با Java ME / J2ME)، پیام‌های کاربران را دریافت کند و با استفاده از ChatGPT API پاسخ دهد. همچنین قابلیت تولید تصویر و ارسال آن در چت‌روم را داشته باشد.

## 📦 ورودی‌ها:
- فایل `.jar` برنامه AVACS (کلاینت J2ME)
- اطلاعات مربوط به کلاس‌های شبکه: استفاده از `javax.microedition.io.SocketConnection`, `Connector`, `HttpConnection`, `SSLConnection`, و ...
- ابزار `org.microemu` برای شبیه‌سازی کلاینت روی PC

## 🧩 مراحل انجام کار:

### مرحله ۱: Decompile و تحلیل فایل JAR
- فایل JAR را با JD-GUI یا JADX decompile کن.
- بررسی کن که برنامه از کدام پروتکل برای اتصال به سرور استفاده می‌کند (Socket, HTTP, UDP)
- مسیرهایی مثل `Connector.open(...)`، `SocketConnection`, `HttpConnection` و `DataInputStream.read()` را دنبال کن.
- IP و پورت سرور را استخراج کن.
- ساختار پیام‌هایی که به سرور ارسال و از آن دریافت می‌شود را تحلیل کن.
- در صورت نیاز، برنامه را در MicroEmulator اجرا کن و ترافیک شبکه را با Wireshark یا `tcpdump` بررسی کن.

### مرحله ۲: ساخت کلاینت بات در جاوا
- با استفاده از اطلاعات مرحله قبل، یک کلاینت ساده بساز که با استفاده از همان پروتکل به سرور AVACS متصل شود.
- این کلاینت باید بتواند:
  - لاگین کند
  - وارد چت‌روم شود
  - پیام‌های دریافتی را چاپ کند
  - پیام‌ها را ارسال کند

### مرحله ۳: اتصال بات به ChatGPT
- هر پیام متنی که از کاربران دریافت می‌شود را به OpenAI API بفرست.
- پاسخ را از ChatGPT دریافت کن و آن را در چت‌روم ارسال کن.

### مرحله ۴: قابلیت تولید عکس
- اگر کاربر پیامی شامل `/image <prompt>` فرستاد:
  - از DALL·E یا مدل Stable Diffusion برای تولید عکس استفاده کن.
  - عکس را ذخیره کن و اگر سیستم ارسال عکس را پشتیبانی می‌کند، آن را به چت‌روم ارسال کن (در غیر اینصورت لینک آن را بفرست).

### مرحله ۵: اجرای دائم روی VPS
- کد نهایی باید به صورت یک برنامه CLI (Java یا Python) اجرا شود.
- باید بتوان آن را روی Ubuntu VPS با `java -jar` یا `python main.py` اجرا کرد.
- بهتر است از ابزارهایی مثل `tmux`, `systemd`, یا `supervisor` برای اجرای دائمی استفاده شود.

## ⚠️ الزامات و محدودیت‌ها
- به هیچ وجه از OCR، اسکرین‌شات یا مانیتورینگ GUI استفاده نشود.
- تمام تعامل‌ها باید در سطح شبکه و از طریق پروتکل مستقیم باشد.
- اگر ارتباط رمزنگاری‌شده باشد (SSL/TLS)، آن را تحلیل یا bypass کن یا از کتابخانه‌های جاوا برای ارتباط امن استفاده کن.

## 🎁 خروجی نهایی مورد انتظار:
- یک فایل `BotClient.java` یا `bot.py` که:
  - به سرور چت متصل می‌شود
  - پیام کاربران را دریافت می‌کند
  - از ChatGPT پاسخ می‌گیرد
  - پاسخ را ارسال می‌کند
  - به درخواست تصویر نیز پاسخ می‌دهد
